version: 2

# The following stanza defines a map named defaults with a variable that may be
# inserted using the YAML merge (<<: *) key later in the file to save some
# typing. See http://yaml.org/type/merge.html for details.
defaults: &defaults
  environment:
    CI_SCRIPTS: "npx --quiet --package @reactioncommerce/ci-scripts@1.6.2"
    DOCKER_REPOSITORY: "reactioncommerce/reaction"
    DOCKER_NAMESPACE: "reactioncommerce"
    DOCKER_NAME: "reaction"
  docker:
    - image: cimg/node:18.10.0

install_pnpm: &install_pnpm
  - run:
      name: Install pnpm package manager
      command: sudo npm i -g pnpm@7.11.0

pnpm_install: &pnpm_install
  - run:
      name: Install PNPM dependencies
      command: pnpm install -r

jobs:
  install-dependencies:
    <<: *defaults
    steps:
      - checkout
      - restore_cache:
          keys:
            - reaction-v7-node-modules-{{ checksum "package.json" }}-{{ checksum "pnpm-lock.yaml" }}
            - reaction-v7-node-modules-{{ .Branch }}
      - <<: *install_pnpm
      - <<: *pnpm_install
      - save_cache:
          key: reaction-v7-node-modules-{{ checksum "package.json" }}-{{ checksum "pnpm-lock.yaml" }}
          paths:
            - node_modules
      - save_cache:
          key: reaction-v7-node-modules-{{ .Branch }}
          paths:
            - node_modules

  dockerfile-lint:
    <<: *defaults
    steps:
      - checkout
      - setup_remote_docker:
          docker_layer_caching: true
      - run:
          name: Lint Dockerfiles
          command: ${CI_SCRIPTS} lint-dockerfiles
  eslint:
    <<: *defaults
    steps:
      - checkout
      - restore_cache:
          keys:
            - reaction-v7-node-modules-{{ checksum "package.json" }}-{{ checksum "pnpm-lock.yaml" }}
            - reaction-v7-node-modules-{{ .Branch }}
      - <<: *install_pnpm
      - <<: *pnpm_install
      - run:
          name: Lint JavaScript
          command: pnpm run lint

  graphql-lint:
    <<: *defaults
    steps:
      - checkout
      - restore_cache:
          keys:
            - reaction-v7-node-modules-{{ checksum "package.json" }}-{{ checksum "pnpm-lock.yaml" }}
            - reaction-v7-node-modules-{{ .Branch }}
      - <<: *install_pnpm
      - <<: *pnpm_install
      - run:
          name: Lint GraphQL schemas
          command: pnpm -r run lint:gql

  test-unit:
    <<: *defaults
    steps:
      - checkout
      - restore_cache:
          keys:
            - reaction-v7-node-modules-{{ checksum "package.json" }}-{{ checksum "pnpm-lock.yaml" }}
            - reaction-v7-node-modules-{{ .Branch }}
      - <<: *install_pnpm
      - <<: *pnpm_install
      - run:
          name: Test Unit
          no_output_timeout: 30m
          command: pnpm test
    resource_class: xlarge

  test-integration-query:
    <<: *defaults
    docker:
      - image: cimg/node:18.10.0
      # Integration tests need MongoDB server running and accessible on port 27017
      - image: mongo:4.0
        command: mongod --oplogSize 128 --replSet rs0 --storageEngine=wiredTiger
        ports:
          - "27017:27017"
      - image: redis
        ports:
          - "6379:6379"
    steps:
      - checkout
      - restore_cache:
          keys:
            - reaction-v7-node-modules-{{ checksum "package.json" }}-{{ checksum "pnpm-lock.yaml" }}
            - reaction-v7-node-modules-{{ .Branch }}
      - <<: *install_pnpm
      - <<: *pnpm_install
      - run:
          name: Run Integration Query Tests
          environment:
            MONGO_URL: mongodb://localhost:27017/test
            MONGO_USE_UNIFIED_TOPOLOGY: false
          command: |
            sudo apt update && sudo apt-get install -y mongodb
            mongo --eval "rs.initiate()"
            pnpm run test:integration:query
    resource_class: xlarge

  test-integration-mutation1:
    <<: *defaults
    docker:
      - image: cimg/node:18.10.0
      # Integration tests need MongoDB server running and accessible on port 27017
      - image: mongo:4.0
        command: mongod --oplogSize 128 --replSet rs0 --storageEngine=wiredTiger
        ports:
          - "27017:27017"
      - image: redis
        ports:
          - "6379:6379"
    steps:
      - checkout
      - restore_cache:
          keys:
            - reaction-v7-node-modules-{{ checksum "package.json" }}-{{ checksum "pnpm-lock.yaml" }}
            - reaction-v7-node-modules-{{ .Branch }}
      - <<: *install_pnpm
      - <<: *pnpm_install
      - run:
          name: Run Integration Mutation Tests
          environment:
            MONGO_URL: mongodb://localhost:27017/test
            MONGO_USE_UNIFIED_TOPOLOGY: false
          command: |
            sudo apt update && sudo apt-get install -y mongodb
            mongo --eval "rs.initiate()"
            pnpm run test:integration:mutation1
    resource_class: xlarge

  test-integration-mutation2:
    <<: *defaults
    docker:
      - image: cimg/node:18.10.0
      # Integration tests need MongoDB server running and accessible on port 27017
      - image: mongo:4.0
        command: mongod --oplogSize 128 --replSet rs0 --storageEngine=wiredTiger
        ports:
          - "27017:27017"
      - image: redis
        ports:
          - "6379:6379"
    steps:
      - checkout
      - restore_cache:
          keys:
            - reaction-v7-node-modules-{{ checksum "package.json" }}-{{ checksum "pnpm-lock.yaml" }}
            - reaction-v7-node-modules-{{ .Branch }}
      - <<: *install_pnpm
      - <<: *pnpm_install
      - run:
          name: Run Integration Mutation Tests
          environment:
            MONGO_URL: mongodb://localhost:27017/test
            MONGO_USE_UNIFIED_TOPOLOGY: false
          command: |
            sudo apt update && sudo apt-get install -y mongodb
            mongo --eval "rs.initiate()"
            pnpm run test:integration:mutation2
    resource_class: xlarge

  release:
    <<: *defaults
    steps:
      - checkout
      - <<: *install_pnpm
      - <<: *pnpm_install
      - run:
          name: Authenticate with registry
          command: echo "//registry.npmjs.org/:_authToken=$NPM_TOKEN" >> ~/.npmrc
      - run:
          name: Push the latest version to npm
          command: pnpm publish -r

  docker-build-push:
    <<: *defaults
    steps:
      - checkout
      - run:
          name: Check should build new image
          command: |
            head_commit=$(git log -1 --oneline | grep -m 1 releases)
            if [[ $head_commit != *"/releases/docker-image"* ]]; then
              circleci-agent step halt
            fi
      - run:
          name: Wait for packages to be propagated
          command: sleep 350
      - setup_remote_docker:
          docker_layer_caching: true
      - run:
          name: Build production Docker image
          command: |
            VERSION=$(cat ./apps/reaction/package.json | grep -m 1 version | sed 's/[^0-9.]//g')
            docker build --no-cache -t ${DOCKER_REPOSITORY}:${VERSION} -t ${DOCKER_REPOSITORY}:latest -f ./apps/reaction/Dockerfile .
      - run:
          name: Create .env file
          command: |
            touch .env
            echo "MONGO_URL=mongodb://mongo.reaction.localhost:27017/reaction?&replicaSet=rs0" >> .env
            echo "ROOT_URL=http://localhost:3000" >> .env
            echo "STORE_URL=http://localhost:4000" >> .env
            echo "STRIPE_API_KEY=YOUR_PRIVATE_STRIPE_API_KEY" >> .env
            echo "REDIS_SERVER=redis://127.0.0.1:6379" >> .env
      - run:
          name: Create reaction.localhost network
          command: docker network create "reaction.localhost" || true
      - run:
          name: Update docker-compose.circleci.yml with new reaction image version
          command: |
            VERSION=$(cat ./apps/reaction/package.json | grep -m 1 version | sed 's/[^0-9.]//g')
            sed -i -e "s/REACTION_VERSION/$VERSION/g" ./docker-compose.circleci.yml
      - run:
          name: Run image
          command: docker-compose -f ./docker-compose.circleci.yml up -d
      - run:
          name: Wait for image run completed
          command: sleep 30
      - run:
          name: Test new docker image
          command: |
            docker exec project-api-1 curl --retry 5 --fail -X POST 'http://localhost:3000/graphql' \
                --header 'Content-Type: application/json' \
                --data-raw '{"query":"query ping { ping }","variables":{}}'
      - run:
          name: Push production Docker image
          command: |
            VERSION=$(cat ./apps/reaction/package.json | grep -m 1 version | sed 's/[^0-9.]//g')
            docker login -u ${DOCKER_USER} -p ${DOCKER_PASS}
            docker push ${DOCKER_REPOSITORY}:${VERSION}
            docker push ${DOCKER_REPOSITORY}:latest

workflows:
  version: 2
  build_and_test:
    jobs:
      - install-dependencies
      - dockerfile-lint:
          requires:
            - install-dependencies
      - eslint:
          requires:
            - install-dependencies
      - graphql-lint:
          requires:
            - install-dependencies
      - test-unit:
          requires:
            - install-dependencies
      - test-integration-query:
          requires:
            - install-dependencies
      - test-integration-mutation1:
          requires:
            - install-dependencies
      - test-integration-mutation2:
          requires:
            - install-dependencies
      - release:
          context: reaction-publish-semantic-release
          filters:
            branches:
              only:
                - trunk
          requires:
            - dockerfile-lint
            - eslint
            - graphql-lint
            - test-unit
            - test-integration-query
            - test-integration-mutation1
            - test-integration-mutation2
      - docker-build-push:
          context: reaction-publish-docker
          filters:
            branches:
              only:
                - trunk
          requires:
            - dockerfile-lint
            - eslint
            - graphql-lint
            - test-unit
            - test-integration-query
            - test-integration-mutation1
            - test-integration-mutation2
